<?php
/*
 * Model for path parsing, publishing, retrieval and rendering.
 *
 * Copyright (C) 2020-2021 J.M. Heisz.  All Rights Reserved.
 * See the LICENSE file accompanying the distribution your rights to use
 * this software.
 */

namespace Pathways;

require_once('module.lib');

/**
 * Container and functional entry point for procesing module data.
 */
class Path {
    public $id, $icon, $title, $synopsis, $inPreview, $time, $points;
    public $modules, $references;

    /**
     * Main constructor either consumes an XML document node for definition or
     * a path identifier to load from the database.
     *
     * @param src Either the XML source or the identifier of the path to load.
     */
    public function __construct($src = null) {
        if ($src instanceof \SimpleXMLElement) {
            $this->_xmlConstruct($src);
        } else if (isset($src)) {
            $this->_pdoConstruct($src);
        }
        /* Fallthrough is a null constructor for static population */
    }

    /* Internal method to load the path instance from the database by id */
    private function _pdoConstruct($id) {
        global $UserId;
        $schema = \Database::schema();

        /* Query the core unit data, validating existence */
        $qryStmt = \Database::prepare('SELECT pth.path_id, pth.title, ' .
                                             'pth.synopsis, pth.in_preview, ' .
                                             'pth.est_time, pth.points ' .
                                      'FROM ' . $schema . 'paths AS pth ' .
                                      'WHERE pth.path_id=?');
        $qryStmt->execute([ $id ]);
        $res = $qryStmt->fetchAll();
        if (count($res) != 1) return;
        $this->id = $id;
        $this->title = $res[0][1];
        $this->synopsis = $res[0][2];
        $this->inPreview = $res[0][3];
        $this->time = $res[0][4];
        $this->points = $res[0][5];
    }

    /* Internal method to construct the path instance from an XML node */
    private function _xmlConstruct($node) {
        /* Grab required elements */
        if ((null == ($this->id = $node['id'])) ||
              (null == ($this->icon = $node['icon'])) ||
              (null == ($this->title = $node['title'])) ||
              (null == ($this->synopsis = $node['synopsis']))) {
            throw new \ErrorException(
                           'Missing required XML attributes for <Path>');
        }

        /* And optional ones */
        $this->inPreview = $node['preview'];
        if (($this->inPreview == null) || ($this->inPreview != 'no')) {
            $this->inPreview = true;
        } else {
            $this->inPreview = false;
        }

        /* Paths can contain module references or full definitions */
        $this->modules = [];
        $this->references = [];
        foreach ($node->children() as $child) {
            if ($child->getName() == 'Module') {
                $mod = new Module($child);
                $mod->inPreview = $this->inPreview;
                array_push($this->modules, $mod);
                array_push($this->references, $mod->id);
            } else if ($child->getName() == 'ModuleReference') {
                if ((null == ($modId = $child['id']))) {
                    throw new \ErrorException(
                                 'Missing "id" required for <ModuleReference>');
                }
                array_push($this->references, $modId);
            } else {
                throw new \ErrorException( 
                           'Invalid child, <Path> can only contain <Module>' .
                           'or <ModuleReference>');
            }
        }
    }

    /**
     * Publish the underlying path content to the data and image stores.
     */
    public function publish() {
        global $BadgesDir;
        $schema = \Database::schema();

        /* First, publish the child module instances */
        foreach ($this->modules as $mod) {
            $mod->publish();
        }

        /* Validate and collect summary information for the path */
        $qry = 'SELECT COUNT(module_id), SUM(est_time), SUM(points) ' .
               'FROM ' . $schema . 'modules ' .
               'WHERE module_id IN (' .
                   str_repeat('?,', count($this->references) -1) . '?)';
        $qryStmt = \Database::prepare($qry);
        $qryStmt->execute($this->references);
        $data = $qryStmt->fetch();
        if ($data[0] != count($this->references)) {
            throw new \ErrorException('Some module ids are unreferenced');
        }

        /* Push the static badge instance */
        if (!copy($this->icon, $BadgesDir . '/path-' . $this->id . '.png')) {
            throw new \ErrorException('Failed to publish module icon');
        }

        /* Simulated upsert, presuming external transaction management */
        $qryStmt = \Database::prepare('SELECT path_id ' .
                                      'FROM ' . $schema . 'paths ' .
                                      'WHERE path_id=? FOR UPDATE');
        $qryStmt->execute([ $this->id ]);
        $preview = ($this->inPreview) ? 't' : 'f';
        if (count($qryStmt->fetchAll()) != 0) {
            $updStmt = \Database::prepare('UPDATE ' . $schema . 'paths ' .
                                          'SET title=?, synopsis=?, ' .
                                              'in_preview=?, est_time = ?, ' .
                                              'points=? ' .
                                          'WHERE path_id=?');
            $updStmt->execute([ $this->title, $this->synopsis, $preview,
                                $data[1], $data[2], $this->id ]);
            if ($updStmt->rowCount() != 1) {
                throw new \ErrorException(
                               'Failed to update path, target not found?');
            }

            /* Delete current signposts (full replacement) */
            $delStmt = \Database::prepare('DELETE FROM ' .
                                                $schema . 'signposts ' .
                                          'WHERE path_id=?');
            $delStmt->execute([ $this->id ]);
        } else {
            $insStmt = \Database::prepare('INSERT INTO ' . $schema . 'paths' .
                                          '(path_id, title, synopsis, ' .
                                           'in_preview, est_time, points) ' .
                                          'VALUES(?, ?, ?, ?, ?, ?)');
            $insStmt->execute([ $this->id, $this->title, $this->synopsis,
                                $preview, $data[1], $data[2] ]);
        }

        /* Yes, not efficient.  But for the number of modules in a path, meh */
        $pstStmt = \Database::prepare('INSERT INTO ' . $schema . 'signposts ' .
                                      '(path_id, module_id, ordr) ' .
                                      'VALUES(?, ?, ?)');
        $idx = 0;
        foreach ($this->references as $modId) {
            $pstStmt->execute([ $this->id, $modId, ++$idx ]);
        }

        echo 'Published [' . $this->id . '] ' . $this->title . "\n";
    }

    /* General rendering function, transforms indexing for sidebar */
    public function renderContent() {
        Global $UserId;
        $schema = \Database::schema();

        /* Big linear query to build the path/module/unit list */
        $qry = 'SELECT mod.module_id, mod.title, mod.synopsis, ' . 
                      'mod.est_time, mod.points, bdg.completed, ' .
                      'un.unit_id, un.title, un.synopsis, un.est_time, ' .
                      'un.points, ast.points, ast.completed ' .
               'FROM ' . $schema . 'paths AS pth ' .
               'JOIN ' . $schema . 'signposts AS pst ' .
                 'ON (pth.path_id=pst.path_id) ' .
               'JOIN ' . $schema . 'modules AS mod ' .
                 'ON (pst.module_id=mod.module_id)' .
               'JOIN ' . $schema . 'units AS un ' .
                 'ON (mod.module_id=un.module_id) ' .
               'LEFT JOIN ' . $schema . 'badges AS bdg ' .
                 'ON (mod.module_id=bdg.module_id AND ' .
                     'bdg.user_id=?)' .
               'LEFT JOIN ' . $schema . 'assessments AS ast ' .
                 'ON (un.module_id=ast.module_id AND ' .
                     'un.unit_id=ast.unit_id AND ' .
                     'ast.user_id=?)' .
               'WHERE pth.path_id=? ' .
               'ORDER BY pst.ordr, un.ordr';

        $qryStmt = \Database::prepare($qry);
        $qryStmt->execute([ $UserId, $UserId, $this->id ]);

        $modList = [];
        $lastMod = null;
        $totalTime = $pointsEarned = $timeLeft = 0;
        $comp = null;
        foreach ($qryStmt->fetchAll() as $row) {
            if (($lastMod == null) || ($row[0] != $lastMod['id'])) {
                if ($lastMod != null) $modList[] = $lastMod;
                $lastMod = array('id' => $row[0],
                                 'title' => $row[1],
                                 'synopsis' => $row[2],
                                 'time' => $row[3],
                                 'points' => $row[4],
                                 'completed' => $row[5],
                                 'unitList' => '',
                                 'earned' => 0,
                                 'remaining' => 0);
            }

            $unitHRef = '/unit/' . $row[0] . '/' . $row[6];
            $lastMod['unitList'] = $lastMod['unitList'] .
                Module::renderModuleUnitContent($unitHRef, $row[7], $row[8],
                                                $row[9], $row[10], $row[11],
                                                $row[12]);
           $totalTime += $row[9];
           if ($row[12] != null) {
               $pointsEarned += $row[11];
               $lastMod['earned'] = $lastMod['earned'] + $row[11];
               if (($comp == null) || ($row[12] > $comp)) $comp = $row[12];
           } else {
               $timeLeft += $row[9];
               $lastMod['remaining'] = $lastMod['remaining'] + $row[9];
           }
        }
        $modList[] = $lastMod;

        /* Format progress or completion */
        if ($timeLeft == 0) {
            $progress = 'Completed ' . Utility::FormatDate($comp);
            $progbar = '';
        } else {
            $progress = Utility::FormatInterval($timeLeft) . ' remaining';

            $pct = intval(($totalTime - $timeLeft) * 100 / $totalTime);
            $progbar = Utility::FormatProgressBar($pct);
        }
        if ($pointsEarned != 0) {
            $progress = $progress . ', ' . $pointsEarned . ' points earned';
        }

        $pth = Module::RenderPMBanner('path-' . $this->id, $this->title,
                                      null, $this->synopsis, $this->points,
                                      $progress, $progbar, ($timeLeft == 0));

        $pth = $pth . '<div class="path-module-list">' . "\n";

        foreach ($modList as $mod) {
            if ($mod['completed'] != null) {
                $progress = 'Completed ' .
                                Utility::FormatDate($mod['completed']);
                $progbar = '';
            } else {
                $progress = Utility::FormatInterval($mod['remaining']) .
                            ' remaining';
                $pct = intval(($mod['time'] - $mod['remaining']) *100 /
                                                             $mod['time']);
                $progbar = Utility::FormatProgressBar($pct);
            }

            $pth = $pth . Module::renderPMBanner('mod-' . $mod['id'],
                                                 $mod['title'],
                                                 '/module/' . $mod['id'],
                                                 $mod['synopsis'],
                                                 $mod['points'],
                                                 $progress, $progbar,
                                                 $mod['completed']) .
                              '<div class="pathmod-unit-list">' . "\n" .
                                  $mod['unitList'] .
                              '</div></div>';
        }

        return $pth;
    }
}

?>
